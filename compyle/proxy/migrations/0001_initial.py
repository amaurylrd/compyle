# Generated by Django 5.2.1 on 2025-05-13 22:46

import uuid

import django.db.models.deletion
import django_cryptography.fields
from django.db import migrations, models

import compyle.lib.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Authentication",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The datetime of the creation.", verbose_name="created at"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="The datetime of the last update.", verbose_name="updated at"
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        default=uuid.uuid4,
                        help_text="The entity reference.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        validators=[compyle.lib.validators.ReferenceValidator()],
                        verbose_name="reference",
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        help_text="The user unique email.", max_length=255, unique=True, verbose_name="email"
                    ),
                ),
                (
                    "login",
                    django_cryptography.fields.encrypt(
                        models.CharField(
                            blank=True,
                            default=None,
                            help_text="The user login issued to the client during the application registration process.",
                            max_length=255,
                            null=True,
                            verbose_name="login",
                        )
                    ),
                ),
                (
                    "password",
                    django_cryptography.fields.encrypt(
                        models.CharField(
                            blank=True,
                            default=None,
                            help_text="The user password issued to the client during the application registration process.",
                            max_length=255,
                            null=True,
                            verbose_name="password",
                        )
                    ),
                ),
                (
                    "client_id",
                    django_cryptography.fields.encrypt(
                        models.CharField(
                            blank=True,
                            default=None,
                            help_text="The client identifier issued to the client during the application registration process.",
                            max_length=255,
                            null=True,
                            verbose_name="client id",
                        )
                    ),
                ),
                (
                    "client_secret",
                    django_cryptography.fields.encrypt(
                        models.CharField(
                            blank=True,
                            default=None,
                            help_text="The client secret issued to the client during the application registration process.",
                            max_length=255,
                            null=True,
                            verbose_name="client secret",
                        )
                    ),
                ),
                (
                    "api_key",
                    django_cryptography.fields.encrypt(
                        models.CharField(
                            blank=True,
                            default=None,
                            help_text="The static API key.",
                            max_length=255,
                            null=True,
                            verbose_name="api key",
                        )
                    ),
                ),
                (
                    "access_token",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The access token to be used for authentication.",
                        max_length=512,
                        null=True,
                        verbose_name="access token",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="The datetime the access token will expire.",
                        null=True,
                        verbose_name="expires at",
                    ),
                ),
                (
                    "refresh_token",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="The refresh token to be used for refreshing the access token.",
                        max_length=512,
                        null=True,
                        verbose_name="refresh token",
                    ),
                ),
            ],
            options={
                "verbose_name": "authentication",
                "verbose_name_plural": "authentications",
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The datetime of the creation.", verbose_name="created at"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="The datetime of the last update.", verbose_name="updated at"
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        default=uuid.uuid4,
                        help_text="The entity reference.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        validators=[compyle.lib.validators.ReferenceValidator()],
                        verbose_name="reference",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the service, for a more human display.",
                        max_length=100,
                        verbose_name="name",
                    ),
                ),
                (
                    "trailing_slash",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Whether to append or not a trailing slash to the url.",
                        verbose_name="trailing slash",
                    ),
                ),
                (
                    "auth_flow",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("api_key", "API key"),
                            ("basic_authentication", "Basic authentication"),
                            ("authorization code", "Authorization code"),
                            ("client credentials", "Client credentials"),
                        ],
                        default=None,
                        help_text="Tells how to authenticate against the service. If not set, no authentication will be used.",
                        max_length=255,
                        null=True,
                        verbose_name="authenfication flow",
                    ),
                ),
                (
                    "token_url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="The URL to be used to request or refresh the user token",
                        null=True,
                        verbose_name="token URL",
                    ),
                ),
            ],
            options={
                "verbose_name": "service",
                "verbose_name_plural": "services",
            },
        ),
        migrations.CreateModel(
            name="Endpoint",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The datetime of the creation.", verbose_name="created at"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="The datetime of the last update.", verbose_name="updated at"
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        default=uuid.uuid4,
                        help_text="The entity reference.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        validators=[compyle.lib.validators.ReferenceValidator()],
                        verbose_name="reference",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The endpoint name, for a more human display.", max_length=100, verbose_name="name"
                    ),
                ),
                ("base_url", models.URLField(help_text="The URL of the endpoint.", verbose_name="URL")),
                (
                    "slug",
                    models.CharField(
                        help_text="The endpoint slug to be append to base URL.", max_length=50, verbose_name="slug"
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("get", "GET"),
                            ("post", "POST"),
                            ("put", "PUT"),
                            ("patch", "PATCH"),
                            ("delete", "DELETE"),
                        ],
                        help_text="The HTTP method used to request the endpoint with.",
                        max_length=10,
                        verbose_name="method",
                    ),
                ),
                (
                    "response_type",
                    models.CharField(
                        choices=[("json", "JSON"), ("xml", "XML"), ("raw", "RAW")],
                        default="json",
                        help_text="Indicates the expected response format.",
                        max_length=10,
                        verbose_name="response type",
                    ),
                ),
                (
                    "auth_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("oauth_password_authentication", "OAuth authentication (grant type 'password')"),
                            (
                                "oauth_client_credentials_authentication",
                                "OAuth authentication (grant type 'client_credentials')",
                            ),
                        ],
                        default=None,
                        help_text="The authification method to be used.",
                        max_length=255,
                        null=True,
                        verbose_name="authenfication method",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        help_text="The service of the endpoint.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="endpoints",
                        to="proxy.service",
                        verbose_name="service",
                    ),
                ),
            ],
            options={
                "verbose_name": "endpoint",
                "verbose_name_plural": "endpoints",
            },
        ),
        migrations.CreateModel(
            name="Trace",
            fields=[
                (
                    "reference",
                    models.CharField(
                        default=uuid.uuid4,
                        help_text="The entity reference.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        validators=[compyle.lib.validators.ReferenceValidator()],
                        verbose_name="reference",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The datetime of the request.", verbose_name="started at"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="The datetime of the response, if any.",
                        null=True,
                        verbose_name="completed at",
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("get", "GET"),
                            ("post", "POST"),
                            ("put", "PUT"),
                            ("patch", "PATCH"),
                            ("delete", "DELETE"),
                        ],
                        help_text="The HTTP method used to request the endpoint with.",
                        max_length=10,
                        verbose_name="method",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True, default=None, help_text="The URL of the request.", null=True, verbose_name="URL"
                    ),
                ),
                (
                    "status_code",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        help_text="The status code of the request response.",
                        null=True,
                        verbose_name="status code",
                    ),
                ),
                (
                    "headers",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="The headers associated with the HTTP request.",
                        null=True,
                        verbose_name="headers",
                    ),
                ),
                (
                    "payload",
                    models.JSONField(
                        blank=True,
                        default=None,
                        help_text="The body of the request JSON-formatted.",
                        null=True,
                        verbose_name="payload",
                    ),
                ),
                (
                    "authentication",
                    models.ForeignKey(
                        blank=True,
                        help_text="The authentication provided for the trace.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="auth_traces",
                        to="proxy.authentication",
                        verbose_name="authentication",
                    ),
                ),
                (
                    "endpoint",
                    models.ForeignKey(
                        help_text="The endpoint of the trace.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="endpoint_traces",
                        to="proxy.endpoint",
                        verbose_name="endpoint",
                    ),
                ),
            ],
            options={
                "verbose_name": "trace",
                "verbose_name_plural": "traces",
                "ordering": ["started_at"],
            },
        ),
    ]
