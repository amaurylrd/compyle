name: Python CI

on:
  push:
    branches:
      - main
      - alpha

  pull_request:
    branches:
      - "**"

  workflow_dispatch:

jobs:
  dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@8b5e8b768746b50394015010d25e690bfab9dfbc
      - uses: ./.github/actions/cache

  quality:
    name: Quality
    needs: [dependencies]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@8b5e8b768746b50394015010d25e690bfab9dfbc
      - uses: ./.github/actions/cache
      - uses: ./.github/actions/pre-commit
      - uses: ./.github/actions/bandit
      - uses: ./.github/actions/pylama

  tests:
    name: Coverage
    needs: [dependencies]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: "compyle"
          POSTGRES_USER: "compyle"
          POSTGRES_PASSWORD: "compyle"
        ports:
          - 5432:5432
        options: >-
          --health-cmd=pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@8b5e8b768746b50394015010d25e690bfab9dfbc
      - uses: ./.github/actions/cache
      - uses: ./.github/actions/coverage

  release:
    name: Release
    runs-on: ubuntu-latest
    concurrency: release
    needs: [dependencies, quality, tests]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, 'chore(release):')) ||
      (github.ref == 'refs/heads/alpha' && github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@8b5e8b768746b50394015010d25e690bfab9dfbc
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: ./.github/actions/cache
      - uses: ./.github/actions/semantic-release

  #     # TODO continuer Ã§a
  #     # - name: Configure git
  #     #   run: |
  #     #     git config user.name github-actions
  #     #     git config user.email

  #     # - name: Run python semantic release
  #     #   run: |
  #     #     poetry run semantic-release changelog --post
  #     #     poetry run semantic-release version

  #     # - name: Publish semver
  #     #   run: poetry run semantic-release publish

  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #     # PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
  #     #     # semantic
